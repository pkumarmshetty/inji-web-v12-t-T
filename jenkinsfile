pipeline {
    agent any

    environment {
        DOCKER_IMAGE_BASE = 'raparna154/inji-web-service'
        MANIFEST_REPO = 'https://github.com/Aparnadeloitte/Inji-infra-azure.git'
        DEPLOY_TO_PROD = false
    }

    stages {
        stage('Get Commit Hash') {
            steps {
                script {
                    env.DOCKER_IMAGE = "${DOCKER_IMAGE_BASE}:${env.GIT_COMMIT}-${env.BUILD_NUMBER}"
                    echo "Docker Image Tag: ${env.DOCKER_IMAGE}"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dir('inji-web') {
                        sh """
                        docker build -t ${env.DOCKER_IMAGE} .
                        """
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerhubpat', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh """
                        echo "${DOCKER_PASS}" | docker login -u "${DOCKER_USER}" --password-stdin
                        docker push ${env.DOCKER_IMAGE}
                        docker logout
                        """
                    }
                }
            }
        }

        stage('Update dev Manifest Repo') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'githubpat2', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_TOKEN')]) {
                        sh """
                        rm -rf Inji-infra-azure
                        git clone https://${GIT_USER}:${GIT_TOKEN}@github.com/Aparnadeloitte/Inji-infra-azure.git
                        cd Inji-infra-azure
                        git checkout main

                        yq eval '.image.repository = "raparna154/inji-web-service" |
                       .image.tag = "'"${env.GIT_COMMIT}-${env.BUILD_NUMBER}"'"
                        ' -i inji-web/values.yaml

                        git add inji-web/values.yaml
                        git commit -m "Auto-update image repository to ${DOCKER_IMAGE_BASE} and tag to ${env.DOCKER_IMAGE}" || echo "No changes to commit"
                        git push origin main
                        """
                    }
                }
            }
        }
        
        stage('Deploy to Dev with ArgoCD') {
            //when {
                //tag "release-*"
            //}
            steps {
               script {
                  withCredentials([usernamePassword(credentialsId: 'argocd-dev-credentials', usernameVariable: 'ARGOCD_USER', passwordVariable: 'ARGOCD_PASS')]) {
                        sh """
                          argocd login argocd.dpgongcp.com --username ${ARGOCD_USER} --password ${ARGOCD_PASS} --insecure
                          argocd app sync inji-web-dev
                          argocd app wait inji-web-dev --health --timeout 600
                        """
                    }
                }
             }
        }
        
        stage('Test on Dev.') {
            steps {
                script {
                    // Add your testing commands here
                    sh """
                    echo "Running tests on development environment..."
                    # Example test command
                    curl -f https://injiweb.dpgongcp.com/ || exit 1
                    """
                }
            }
        }

        stage('Update prod Manifest Repo.') {
            when {
              expression {
                env.DEPLOY_TO_PROD == 'true'
                }
            }
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'githubpat2', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_TOKEN')]) {
                        sh """
                        rm -rf Inji-infra-azure
                        git clone https://${GIT_USER}:${GIT_TOKEN}@github.com/Aparnadeloitte/Inji-infra-azure.git
                        cd Inji-infra-azure
                        git checkout prod

                        yq eval '.image.repository = "raparna154/inji-web-service" |
                       .image.tag = "'"${env.GIT_COMMIT}-${env.BUILD_NUMBER}"'"
                        ' -i inji-web/values.yaml

                        git add inji-web/values.yaml
                        git commit -m "Auto-update image repository to ${DOCKER_IMAGE_BASE} and tag to ${env.DOCKER_IMAGE}" || echo "No changes to commit"
                        git push origin prod
                        """
                    }
                }
            }
        }

        stage('Deploy to Prod with ArgoCD.') {
            when {
                expression {
                    env.DEPLOY_TO_PROD == 'true'
                    }
                }          
            steps {
               script {
                  withCredentials([usernamePassword(credentialsId: 'argocd-prod-credentials', usernameVariable: 'ARGOCD_USER', passwordVariable: 'ARGOCD_PASS')]) {
                     sh """
                        argocd login argocd.prod.dpgongcp.com --username ${ARGOCD_USER} --password ${ARGOCD_PASS} --insecure
                        argocd app sync inji-web-prod
                        argocd app wait inji-web-prod --health --timeout 600
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Pipeline completed successfully! updated image: ${env.DOCKER_IMAGE} in manifest repo."
        }
        failure {
            echo "Failed! Last attempted Docker Image Tag: ${env.DOCKER_IMAGE}"
        }
    }
}
